{"version":3,"sources":["webpack:///./src/pages/mario_clone.js","webpack:///./.cache/gatsby-browser-entry.js","webpack:///./.cache/public-page-renderer.js","webpack:///./.cache/public-page-renderer-prod.js","webpack:///./src/images/ResumeOnline.pdf","webpack:///./src/components/seo.js","webpack:///./src/components/mynavbar.js","webpack:///./src/components/myfooter.js","webpack:///./src/components/layout.js"],"names":["MarioClonePage","state","render","react__WEBPACK_IMPORTED_MODULE_1___default","a","createElement","_components_layout__WEBPACK_IMPORTED_MODULE_3__","_components_seo__WEBPACK_IMPORTED_MODULE_4__","title","mdbreact__WEBPACK_IMPORTED_MODULE_2__","around","style","marginBottom","md","className","src","href","target","Component","__webpack_require__","d","__webpack_exports__","StaticQuery","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","prop_types__WEBPACK_IMPORTED_MODULE_1__","prop_types__WEBPACK_IMPORTED_MODULE_1___default","gatsby_link__WEBPACK_IMPORTED_MODULE_2__","gatsby_link__WEBPACK_IMPORTED_MODULE_2___default","StaticQueryContext","React","createContext","props","Consumer","staticQueryData","data","query","children","propTypes","PropTypes","object","string","isRequired","func","m","module","exports","require","default","ProdPageRenderer","_ref","location","pageResources","loader","getResourcesForPathnameSync","pathname","InternalPageRenderer","Object","assign","json","shape","p","SEO","description","lang","meta","keywords","gatsby__WEBPACK_IMPORTED_MODULE_4__","detailsQuery","metaDescription","site","siteMetadata","react_helmet__WEBPACK_IMPORTED_MODULE_3___default","htmlAttributes","titleTemplate","name","content","property","author","concat","length","join","_public_static_d_1025518380_json__WEBPACK_IMPORTED_MODULE_0__","defaultProps","array","arrayOf","MyNavbar","isOpen","toggleCollapse","_this","setState","react_default","mdbreact_esm","color","dark","expand","gatsby_browser_entry","to","onClick","this","id","navbar","left","nav","caret","divider","Resume","right","fab","icon","MyFooter","fluid","paddingTop","center","Layout","Fragment","mynavbar","myfooter","node"],"mappings":"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","file":"component---src-pages-mario-clone-js-a0d0683bf5c6de1dfa6a.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nimport { MDBContainer, MDBRow, MDBCol } from \"mdbreact\";\r\n\r\nimport Layout from \"../components/layout\";\r\nimport SEO from \"../components/seo\";\r\n\r\nclass MarioClonePage extends Component {\r\n  state = {};\r\n  render() {\r\n    return (\r\n      <Layout>\r\n        <SEO title=\"MarioClone\" />\r\n        <MDBContainer>\r\n          <MDBRow around style={{ marginBottom: \"2rem\" }}>\r\n            <MDBCol md=\"5\">\r\n              <div className=\"embed-responsive embed-responsive-16by9\">\r\n                <iframe\r\n                  className=\"embed-responsive-item\"\r\n                  src=\"https://www.youtube.com/embed/VKNOURaNKcs\"\r\n                />\r\n              </div>\r\n            </MDBCol>\r\n            <MDBCol md=\"5\" className=\"align-self-center\">\r\n              <p>\r\n                <strong>Source Code: </strong>\r\n                <a\r\n                  href=\"https://github.com/deanhaleem/mario-clone\"\r\n                  target=\"_blank\"\r\n                >\r\n                  GitHub\r\n                </a>\r\n              </p>\r\n              <p>\r\n                <strong>Language(s):</strong> C#\r\n              </p>\r\n              <p>\r\n                <strong>Tools:</strong> Visual Studio 2017,{\" \"}\r\n                <a href=\"http://www.monogame.net/\" target=\"_blank\">\r\n                  MonoGame\r\n                </a>\r\n                , Azure Devops\r\n              </p>\r\n            </MDBCol>\r\n          </MDBRow>\r\n          <MDBRow>\r\n            <MDBCol>\r\n              <strong>Project Description</strong>\r\n              <p>\r\n                This is very straightforward. The goal was the make a clone of\r\n                the first level of the original Super Mario Bros. The class put\r\n                us in teams of four and split the project up into four sprints.\r\n                We used Agile SCRUM methodologies. There was a decent amount of\r\n                independence when it came to the project, but instructors and\r\n                graders provided a lot of feedback on the quality of the code.\r\n                This helped us gear our code more towards building a game engine\r\n                and then using that to make Mario Bros, rather than just making\r\n                the game itself.\r\n              </p>\r\n            </MDBCol>\r\n          </MDBRow>\r\n          <MDBRow>\r\n            <MDBCol>\r\n              <strong>Challenges</strong>\r\n              <p>\r\n                Maybe putting the challenge on ourselves, but our team really\r\n                took seriously the goal of making a game engine that is the used\r\n                to play Mario. This created the challenge of making most thing\r\n                in our project reusable for other games. And to be honest, our\r\n                team during that semester weren't exactly successful. If we even\r\n                wanted to do something simple such as swap out the art for Mario\r\n                with Super Mario Bros 3's art, it would've involved a lot of\r\n                work.\r\n              </p>\r\n              <p>\r\n                Now that I grade for the class, I've had the chance to redo the\r\n                project a few times. I've made much more progress on my team's\r\n                original work by going with a data driven approach. MonoGame is\r\n                very code heavy, with a \"code first\" way of making games. But I\r\n                instead went with a more \"give me data and I'll put what you\r\n                want on the screen\" approach. The sprites are a good example of\r\n                that. I have just one sprites class that basically takes in info\r\n                from a file and uses that to draw the correct image to the\r\n                screen. The enemies are another decent example. I have just one\r\n                enemy class that takes in things like color and sprite name.\r\n                That helps the correct thing be drawn to the screen, and it also\r\n                still allows for a system where different enemies can interact\r\n                differently with Mario.\r\n              </p>\r\n            </MDBCol>\r\n          </MDBRow>\r\n          <MDBRow>\r\n            <MDBCol>\r\n              <strong>Sprints</strong>\r\n              <p>A quickdown of the sprints:</p>\r\n              <strong>Sprint 1</strong>\r\n              <p>\r\n                Sprint 1 was focused on setting up our game objects and giving\r\n                them states. The main design pattern in use was the State\r\n                Pattern as a result. Our team used states for pretty much\r\n                everything. Players, Enemies, Blocks, Items. It may have been\r\n                overkill, but it definitely drilled into us what the state\r\n                pattern was and how it works.\r\n              </p>\r\n              <strong>Sprint 2</strong>\r\n              <p>\r\n                Sprint 2 was all about collisions. We didn't introduce actual\r\n                physics here, just Pokemon or original Legend of Zelda type\r\n                movement. The big lesson here wasn't necessarily a design\r\n                pattern, but more what it means to go into a task trying to\r\n                envision an overall system. In the first iteration of this, I\r\n                couldn't tell you how we actually set up our collision detection\r\n                and response system. We would detect the collision, and then\r\n                we'd start on this long journey through classes before finally\r\n                landing at the spot where we actually deal with the collision.\r\n                There was no symmetry or system to that chain of classes. Each\r\n                object was different. This alone displayed how important it is\r\n                to write maintainable and reusable code.\r\n              </p>\r\n              <p>\r\n                We never made a second version during class, but I myself have\r\n                done the project a few times on my own now. This is mainly\r\n                because I grade for the class, and so I need to know how to do\r\n                every aspect of the project, and how to do them well. In my\r\n                third iteration, I finally had a setup where I could tell you\r\n                how it actually works for every object. I first loop through the\r\n                game objects and detect collisions using simple AABB (MonoGame\r\n                actually has it built into their Rectangle type). Then I figure\r\n                out the type of the two objects using .NET's type system. Third,\r\n                I pass it off to a class that has a big dictionary. The\r\n                dictionary takes in tuples of types and spits out a command\r\n                (Command Pattern here) object whose Execute is called. Fourth,\r\n                the Execute will call a class that handles collisions for the\r\n                two types of objects colliding. The Execute of the command knows\r\n                exactly which method to call as well.\r\n              </p>\r\n              <p>\r\n                A quick example: Big Mario collides with a moving Koopa Shell. I\r\n                detect the collision, figure out it's Mario and a Koopa, pass in\r\n                Mario's powerup type (Big), the fact it's Mario, the fact it's a\r\n                Koopa, and the Koopa's movement state (moving), and that gives\r\n                me a command. This command's Execute will call a method along\r\n                the lines of HandleNonSmallMarioMovingShellCollision (maybe need\r\n                to work on the length of the name), and that method will handle\r\n                the details for resolving the collision. And this setup is how\r\n                it works for every collision type. It's very easy to read, and\r\n                it's also very easy to expand.\r\n              </p>\r\n              <strong>Sprint 4</strong>\r\n              <p>\r\n                Sprint 4 was all about physics. This taught great lessons in the\r\n                amount of research needed to make a good feeling game. We found\r\n                a lot of resources in terms of Mario physics, and we spent a lot\r\n                of time playing with magic numbers and such until we were happy\r\n                with how it felt. This also demonstrated the importance of\r\n                having a small test area project that you can use without having\r\n                to build the actual project.\r\n              </p>\r\n              <strong>Sprint 5</strong>\r\n              <p>\r\n                The main task was to implement sound, but I always tell students\r\n                this is really the \"do everything you haven't done yet\" sprint.\r\n                This involves cleaning up things such as magic numbers or string\r\n                literals.\r\n              </p>\r\n            </MDBCol>\r\n          </MDBRow>\r\n        </MDBContainer>\r\n      </Layout>\r\n    );\r\n  }\r\n}\r\n\r\nexport default MarioClonePage;\r\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Link, {\n  withPrefix,\n  withAssetPrefix,\n  navigate,\n  push,\n  replace,\n  navigateTo,\n  parsePath,\n} from \"gatsby-link\"\nimport PageRenderer from \"./public-page-renderer\"\n\nconst StaticQueryContext = React.createContext({})\n\nconst StaticQuery = props => (\n  <StaticQueryContext.Consumer>\n    {staticQueryData => {\n      if (\n        props.data ||\n        (staticQueryData[props.query] && staticQueryData[props.query].data)\n      ) {\n        return (props.render || props.children)(\n          props.data ? props.data.data : staticQueryData[props.query].data\n        )\n      } else {\n        return <div>Loading (StaticQuery)</div>\n      }\n    }}\n  </StaticQueryContext.Consumer>\n)\n\nconst useStaticQuery = query => {\n  if (\n    typeof React.useContext !== `function` &&\n    process.env.NODE_ENV === `development`\n  ) {\n    throw new Error(\n      `You're likely using a version of React that doesn't support Hooks\\n` +\n        `Please update React and ReactDOM to 16.8.0 or later to use the useStaticQuery hook.`\n    )\n  }\n  const context = React.useContext(StaticQueryContext)\n  if (context[query] && context[query].data) {\n    return context[query].data\n  } else {\n    throw new Error(\n      `The result of this StaticQuery could not be fetched.\\n\\n` +\n        `This is likely a bug in Gatsby and if refreshing the page does not fix it, ` +\n        `please open an issue in https://github.com/gatsbyjs/gatsby/issues`\n    )\n  }\n}\n\nStaticQuery.propTypes = {\n  data: PropTypes.object,\n  query: PropTypes.string.isRequired,\n  render: PropTypes.func,\n  children: PropTypes.func,\n}\n\nfunction graphql() {\n  throw new Error(\n    `It appears like Gatsby is misconfigured. Gatsby related \\`graphql\\` calls ` +\n      `are supposed to only be evaluated at compile time, and then compiled away. ` +\n      `Unfortunately, something went wrong and the query was left in the compiled code.\\n\\n` +\n      `Unless your site has a complex or custom babel/Gatsby configuration this is likely a bug in Gatsby.`\n  )\n}\n\nexport {\n  Link,\n  withAssetPrefix,\n  withPrefix,\n  graphql,\n  parsePath,\n  navigate,\n  push, // TODO replace for v3\n  replace, // TODO remove replace for v3\n  navigateTo, // TODO: remove navigateTo for v3\n  StaticQueryContext,\n  StaticQuery,\n  PageRenderer,\n  useStaticQuery,\n}\n","const preferDefault = m => (m && m.default) || m\n\nif (process.env.BUILD_STAGE === `develop`) {\n  module.exports = preferDefault(require(`./public-page-renderer-dev`))\n} else if (process.env.BUILD_STAGE === `build-javascript`) {\n  module.exports = preferDefault(require(`./public-page-renderer-prod`))\n} else {\n  module.exports = () => null\n}\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport InternalPageRenderer from \"./page-renderer\"\nimport loader from \"./loader\"\n\nconst ProdPageRenderer = ({ location }) => {\n  const pageResources = loader.getResourcesForPathnameSync(location.pathname)\n  if (!pageResources) {\n    return null\n  }\n\n  return React.createElement(InternalPageRenderer, {\n    location,\n    pageResources,\n    ...pageResources.json,\n  })\n}\n\nProdPageRenderer.propTypes = {\n  location: PropTypes.shape({\n    pathname: PropTypes.string.isRequired,\n  }).isRequired,\n}\n\nexport default ProdPageRenderer\n","module.exports = __webpack_public_path__ + \"static/ResumeOnline-5f665b27c6853840c50ac4e7b72fe2f2.pdf\";","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport Helmet from \"react-helmet\";\r\nimport { StaticQuery, graphql } from \"gatsby\";\r\n\r\nfunction SEO({ description, lang, meta, keywords, title }) {\r\n  return (\r\n    <StaticQuery\r\n      query={detailsQuery}\r\n      render={data => {\r\n        const metaDescription =\r\n          description || data.site.siteMetadata.description;\r\n        return (\r\n          <Helmet\r\n            htmlAttributes={{\r\n              lang,\r\n            }}\r\n            title={title}\r\n            titleTemplate={`%s | ${data.site.siteMetadata.title}`}\r\n            meta={[\r\n              {\r\n                name: `description`,\r\n                content: metaDescription,\r\n              },\r\n              {\r\n                property: `og:title`,\r\n                content: title,\r\n              },\r\n              {\r\n                property: `og:description`,\r\n                content: metaDescription,\r\n              },\r\n              {\r\n                property: `og:type`,\r\n                content: `website`,\r\n              },\r\n              {\r\n                name: `twitter:card`,\r\n                content: `summary`,\r\n              },\r\n              {\r\n                name: `twitter:creator`,\r\n                content: data.site.siteMetadata.author,\r\n              },\r\n              {\r\n                name: `twitter:title`,\r\n                content: title,\r\n              },\r\n              {\r\n                name: `twitter:description`,\r\n                content: metaDescription,\r\n              },\r\n            ]\r\n              .concat(\r\n                keywords.length > 0\r\n                  ? {\r\n                      name: `keywords`,\r\n                      content: keywords.join(`, `),\r\n                    }\r\n                  : []\r\n              )\r\n              .concat(meta)}\r\n          />\r\n        );\r\n      }}\r\n    />\r\n  );\r\n}\r\n\r\nSEO.defaultProps = {\r\n  lang: `en`,\r\n  meta: [],\r\n  keywords: [],\r\n};\r\n\r\nSEO.propTypes = {\r\n  description: PropTypes.string,\r\n  lang: PropTypes.string,\r\n  meta: PropTypes.array,\r\n  keywords: PropTypes.arrayOf(PropTypes.string),\r\n  title: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default SEO;\r\n\r\nconst detailsQuery = graphql`\r\n  query DefaultSEOQuery {\r\n    site {\r\n      siteMetadata {\r\n        title\r\n        description\r\n        author\r\n      }\r\n    }\r\n  }\r\n`;\r\n","import React, { Component } from \"react\";\r\nimport { Link } from \"gatsby\";\r\n\r\nimport {\r\n  MDBNavbar,\r\n  MDBNavbarNav,\r\n  MDBNavItem,\r\n  MDBNavbarToggler,\r\n  MDBCollapse,\r\n  MDBDropdown,\r\n  MDBDropdownToggle,\r\n  MDBDropdownMenu,\r\n  MDBDropdownItem,\r\n  MDBIcon,\r\n  MDBNav,\r\n} from \"mdbreact\";\r\n\r\nimport Resume from \"../images/ResumeOnline.pdf\";\r\n\r\nclass MyNavbar extends Component {\r\n  state = {\r\n    isOpen: false,\r\n  };\r\n\r\n  toggleCollapse = () => {\r\n    this.setState({ isOpen: !this.state.isOpen });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <MDBNavbar\r\n        color=\"unique-color-dark\"\r\n        dark\r\n        expand=\"md\"\r\n        className=\"sticky-top\"\r\n        style={{ marginBottom: \"2rem\" }}\r\n      >\r\n        <Link to=\"/\" className=\"navbar-brand\">\r\n          <strong className=\"white-text\">Dean Haleem</strong>\r\n        </Link>\r\n        <MDBNavbarToggler name=\"navbar-toggler\" onClick={this.toggleCollapse} />\r\n        <MDBCollapse id=\"navbarCollapse3\" isOpen={this.state.isOpen} navbar>\r\n          <MDBNavbarNav left>\r\n            <MDBNavItem>\r\n              <MDBDropdown>\r\n                <MDBDropdownToggle nav caret>\r\n                  Projects\r\n                </MDBDropdownToggle>\r\n                <MDBDropdownMenu>\r\n                  <Link className=\"dropdown-item\" to=\"/projects/\">\r\n                    Overview\r\n                  </Link>\r\n                  <MDBDropdownItem divider />\r\n                  <Link className=\"dropdown-item\" to=\"/mario_clone/\">\r\n                    Mario Clone\r\n                  </Link>\r\n                  <Link className=\"dropdown-item\" to=\"/unity/\">\r\n                    Unity\r\n                  </Link>\r\n                  <Link className=\"dropdown-item\" to=\"/website/\">\r\n                    Website\r\n                  </Link>\r\n                  <MDBDropdownItem divider />\r\n                  <Link className=\"dropdown-item\" to=\"/robot/\">\r\n                    FEH Robot\r\n                  </Link>\r\n                </MDBDropdownMenu>\r\n              </MDBDropdown>\r\n            </MDBNavItem>\r\n            <MDBNavItem>\r\n              <Link className=\"nav-link\" to=\"/about/\">\r\n                About\r\n              </Link>\r\n            </MDBNavItem>\r\n            <MDBNavItem>\r\n              <a className=\"nav-link\" href={Resume} target=\"_blank\">\r\n                R&eacute;sum&eacute;\r\n              </a>\r\n            </MDBNavItem>\r\n          </MDBNavbarNav>\r\n          <MDBNavbarNav right>\r\n            <MDBNavItem>\r\n              <a\r\n                className=\"nav-link\"\r\n                href=\"https://github.com/deanhaleem\"\r\n                target=\"_blank\"\r\n              >\r\n                <MDBIcon fab icon=\"github\" />\r\n              </a>\r\n            </MDBNavItem>\r\n            <MDBNavItem>\r\n              <a\r\n                className=\"nav-link\"\r\n                href=\"https://instagram.com/deanhaleem\"\r\n                target=\"_blank\"\r\n              >\r\n                <MDBIcon fab icon=\"instagram\" />\r\n              </a>\r\n            </MDBNavItem>\r\n            <MDBNavItem>\r\n              <a\r\n                className=\"nav-link\"\r\n                href=\"https://www.linkedin.com/in/deanhaleem\"\r\n                target=\"_blank\"\r\n              >\r\n                <MDBIcon fab icon=\"linkedin-in\" />\r\n              </a>\r\n            </MDBNavItem>\r\n          </MDBNavbarNav>\r\n        </MDBCollapse>\r\n      </MDBNavbar>\r\n    );\r\n  }\r\n}\r\n\r\nexport default MyNavbar;\r\n","import React, { Component } from \"react\";\r\n\r\nimport { MDBCol, MDBContainer, MDBRow, MDBFooter } from \"mdbreact\";\r\n\r\nclass MyFooter extends Component {\r\n  state = {};\r\n  render() {\r\n    return (\r\n      <MDBFooter color=\"unique-color-dark\">\r\n        <MDBContainer fluid>\r\n          <MDBRow style={{ paddingTop: \"1rem\" }} center className=\"text-center\">\r\n            <p>\r\n              Thank you for taking the time to visit my website. Please, take a\r\n              look around, and always feel free to contact me.\r\n            </p>\r\n          </MDBRow>\r\n        </MDBContainer>\r\n        <div className=\"footer-copyright text-center py-3\">\r\n          <MDBContainer fluid>\r\n            <MDBRow className=\"text-center\">\r\n              <MDBCol md=\"2\">\r\n                <a\r\n                  href=\"https://www.linkedin.com/in/deanhaleem\"\r\n                  target=\"_blank\"\r\n                >\r\n                  LINKEDIN\r\n                </a>\r\n              </MDBCol>\r\n              <MDBCol md=\"2\">\r\n                <a href=\"https://instagram.com/deanhaleem\" target=\"_blank\">\r\n                  INSTAGRAM\r\n                </a>\r\n              </MDBCol>\r\n              <MDBCol md=\"4\" style={{ color: \"white\" }}>\r\n                deanhaleem.10@gmail.com\r\n              </MDBCol>\r\n              <MDBCol md=\"2\">\r\n                <a href=\"https://github.com/deanhaleem\" target=\"_blank\">\r\n                  GITHUB\r\n                </a>\r\n              </MDBCol>\r\n              <MDBCol md=\"2\">\r\n                <a href=\"https://twitter.com/deanhaleem\" target=\"_blank\">\r\n                  TWITTER\r\n                </a>\r\n              </MDBCol>\r\n            </MDBRow>\r\n          </MDBContainer>\r\n        </div>\r\n      </MDBFooter>\r\n    );\r\n  }\r\n}\r\n\r\nexport default MyFooter;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport MyNavbar from \"./mynavbar\";\r\nimport MyFooter from \"./myfooter\";\r\n\r\nconst Layout = ({ children }) => (\r\n  <>\r\n    <MyNavbar />\r\n    {children}\r\n    <MyFooter />\r\n  </>\r\n);\r\n\r\nLayout.propTypes = {\r\n  children: PropTypes.node.isRequired,\r\n};\r\n\r\nexport default Layout;\r\n"],"sourceRoot":""}